[
  {
    "name": "Ramda – A practical functional library for JavaScript that is designed specifically for a functional programming style. A style that makes it easy to create functional pipelines and never mutates user data.",
    "url": "https://github.com/ramda/ramda"
  },
  {
    "name": "Folktale – Folktale is a suite of libraries for generic functional programming that allows you to write elegant modular applications with fewer bugs and more reuse.",
    "url": "http://folktalejs.org/"
  },
  {
    "name": "lodash/fp – An instance of Lodash with its methods wrapped to produce immutable, auto-curried, iteratee-first, data-last methods.",
    "url": "https://github.com/lodash/lodash/wiki/FP-Guide"
  },
  {
    "name": "functional.js – A lightweight functional JavaScript library that facilitates currying and point-free / tacit programming.",
    "url": "http://functionaljs.com"
  },
  {
    "name": "101 – A modern and modular JavaScript utility library made to work well with vanilla JavaScript methods.",
    "url": "https://github.com/tjmehta/101"
  },
  {
    "name": "fnuc – A functional library for CoffeeScript (and JavaScript) to facilitate functional composition and higher order functions.",
    "url": "https://github.com/algesten/fnuc"
  },
  {
    "name": "barely-functional – A tiny (2.7kb) functional programming library using native ES5/6 operations.",
    "url": "https://github.com/cullophid/barely-functional"
  },
  {
    "name": "prelude.ls – A functionally oriented utility library somewhat based off of Haskell's Prelude module.",
    "url": "http://gkz.github.io/prelude-ls/"
  },
  {
    "name": "allong.es – A collection of functions to facilitate writing JavaScript with functions as first-class values, designed to complement libraries like Underscore, not compete with them.",
    "url": "http://allong.es/"
  },
  {
    "name": "1-liners – Functional tools that couldn’t be simpler. A dead simple functional utility belt, hand-crafted with love and attention.",
    "url": "https://github.com/1-liners/1-liners"
  },
  {
    "name": "fn-curry – A simple function to curry a function.",
    "url": "https://github.com/thunklife/fn-curry"
  },
  {
    "name": "curry – Curry your functions using function bind syntax.",
    "url": "https://github.com/thisables/curry"
  },
  {
    "name": "compose-function – Compose a new function from smaller functions.",
    "url": "https://github.com/stoeffel/compose-function"
  },
  {
    "name": "functionize – A collection of functions which aid in making non-functional libraries functional.",
    "url": "https://github.com/paldepind/functionize"
  },
  {
    "name": "lambdajs – The full ECMAScript API done a functional way.",
    "url": "https://github.com/loop-recur/lambdajs"
  },
  {
    "name": "fp-dom – Making the DOM functional.",
    "url": "https://github.com/fp-dom/"
  },
  {
    "name": "trifl – A functional user interface library with unidirectional dataflow and a virtual dom.",
    "url": "https://github.com/algesten/trifl"
  },
  {
    "name": "funcy – An experiment in adding functional pattern matching to JavaScript. Experimental  ",
    "url": "https://github.com/bramstein/funcy"
  },
  {
    "name": "date-fp – A functional utility library for working with JavaScript dates. All functions in date-fp are pure, autocurried and will not mutate the date objects they are applied to.",
    "url": "https://github.com/cullophid/date-fp"
  },
  {
    "name": "_part_ – A micro library that encourages functional programming by making native methods available as partially applied functions.",
    "url": "https://github.com/AutoSponge/_part_"
  },
  {
    "name": "claire – A property-based testing library for clearly specifying code invariants and behaviour.",
    "url": "https://github.com/robotlolita/claire"
  },
  {
    "name": "Immutable.js – Immutable persistent data collections.",
    "url": "https://github.com/facebook/immutable-js"
  },
  {
    "name": "Mori – ClojureScript’s persistent data structures and supporting API from the comfort of vanilla JavaScript.",
    "url": "https://github.com/swannodette/mori"
  },
  {
    "name": "immutable-sequence.js –  High performance implementation of Immutable Sequence in JavaScript, based on Finger Trees.",
    "url": "https://github.com/qiao/immutable-sequence.js"
  },
  {
    "name": "Timm – Immutability helpers with fast reads and acceptable writes.",
    "url": "http://guigrpa.github.io/timm/"
  },
  {
    "name": "Lazy.js – A utility library with a lazy engine under the hood that strives to do as little work as possible while being as flexible as possible.",
    "url": "https://github.com/dtao/lazy.js"
  },
  {
    "name": "FantasyLand – Not a library, but a specification of the Monad laws for libraries to follow.",
    "url": "https://github.com/fantasyland/fantasy-land"
  },
  {
    "name": "daggy – Library for creating tagged constructors.",
    "url": "https://github.com/puffnfresh/daggy"
  },
  {
    "name": "Sanctuary – Sanctuary makes it possible to write safe code without null checks.",
    "url": "https://github.com/plaid/sanctuary"
  },
  {
    "name": "ramda-fantasy – Fantasy-Land compatible types for easy integration with Ramda.js.",
    "url": "https://github.com/ramda/ramda-fantasy"
  },
  {
    "name": "monet.js – A library that assists functional programming by providing a rich set of Monads and other useful functions.",
    "url": "http://cwmyers.github.io/monet.js/"
  },
  {
    "name": "union-type – A small JavaScript library for defining and using union types.",
    "url": "https://github.com/paldepind/union-type"
  },
  {
    "name": "freeky – A collection of Free monads.",
    "url": "https://github.com/DrBoolean/freeky"
  },
  {
    "name": "Fluture – A Future library with included control utilities, high performance and great error messages.",
    "url": "https://github.com/Avaq/Fluture"
  },
  {
    "name": "fantasy-combinators – Common combinators.",
    "url": "https://github.com/fantasyland/fantasy-combinators"
  },
  {
    "name": "fantasy-birds – Port of the Haskell package Data.Aviary.Birds. Everything for your combinatory needs.",
    "url": "https://github.com/fantasyland/fantasy-birds"
  },
  {
    "name": "lenses – Composable kmett style lenses.",
    "url": "https://github.com/DrBoolean/lenses"
  },
  {
    "name": "optics – Profunctor optics (Lens, Prism, iso).",
    "url": "https://github.com/flunc/optics"
  },
  {
    "name": "ramda-lens –   Lens library built on Ramda.",
    "url": "https://github.com/ramda/ramda-lens"
  },
  {
    "name": "fantasy-lenses – Composable, immutable getters and setters. (Profunctor lenses WIP)",
    "url": "https://github.com/fantasyland/fantasy-lenses"
  },
  {
    "name": "nanoscope – Lenses with dotty support.",
    "url": "https://github.com/5outh/nanoscope"
  },
  {
    "name": "partial.lenses – Ramda compatible partial lenses. View, insert and update optional data.",
    "url": "https://github.com/calmm-js/partial.lenses"
  },
  {
    "name": "ClojureScript – Compiles Clojure, a hosted Lisp with immutable persistent data structures, to JavaScript.",
    "url": "https://github.com/clojure/clojurescript"
  },
  {
    "name": "Elm – A type-safe functional programming language for declaratively creating web browser-based graphical user interfaces. Implemented in Haskell.",
    "url": "http://elm-lang.org/"
  },
  {
    "name": "PureScript – A small strongly typed programming language that compiles to JavaScript.",
    "url": "http://www.purescript.org/"
  },
  {
    "name": "Idris – A general purpose pure functional programming language with dependent types.",
    "url": "http://www.idris-lang.org/"
  },
  {
    "name": "GHCJS – Haskell to JavaScript compiler, based on GHC.",
    "url": "https://github.com/ghcjs/ghcjs"
  },
  {
    "name": "ElixirScript – Compiles a subset of Elixir, a dynamic, functional language designed for building scalable and maintainable applications, to JavaScript.",
    "url": "https://github.com/bryanjos/elixirscript"
  },
  {
    "name": "Js_of_ocaml – Compiles OCaml bytecode to JavaScript, making it possible to run OCaml programs in the browser.",
    "url": "http://ocsigen.org/js_of_ocaml/"
  },
  {
    "name": "BuckleScript – JavaScript backend for the OCaml compiler.",
    "url": "https://bloomberg.github.io/bucklescript/"
  },
  {
    "name": "Scala.js – Compiles Scala to JavaScript.",
    "url": "http://www.scala-js.org/"
  },
  {
    "name": "LiveScript – LiveScript has a straightforward mapping to JavaScript and allows you to write expressive code devoid of repetitive boilerplate.",
    "url": "http://gkz.github.io/LiveScript/"
  },
  {
    "name": "Professor Frisby’s Mostly Adequate Guide to Functional Programming – This is a book on the functional paradigm in general using the world’s most popular functional programming language: JavaScript. It’s a practical introduction that builds up intuition through real-world examples. Strongly recommended. By Brian Lonsdorf (2016)",
    "url": "https://github.com/MostlyAdequate/mostly-adequate-guide"
  },
  {
    "name": "JavaScript Allongé, the “Six” edition. Starts with as little as possible about functions – but no less! – and builds up towards powerful combinators and decorators. A foundational book. By Reginald  Braithwaite (2016)",
    "url": "https://leanpub.com/javascriptallongesix"
  },
  {
    "name": "Functional Programming in JavaScript teaches JavaScript developers functional techniques that will improve extensibility, modularity, reusability, testability, and performance. Through concrete examples and jargon-free explanations, this book teaches you how to apply functional programming to real-life development tasks. By Luis Atencio (2016)",
    "url": "https://www.manning.com/books/functional-programming-in-javascript"
  },
  {
    "name": "Eloquent JavaScript. A modern introduction to programming using JavaScript. By Marijn Haverbeke (2014)",
    "url": "http://eloquentjavascript.net/"
  },
  {
    "name": "Functional JavaScript teaches how to create code that’s beautiful, safe, and simple to understand and test by using JavaScript’s functional programming support. By Michael Fogus (2013)",
    "url": "http://shop.oreilly.com/product/0636920028857.do"
  },
  {
    "name": "FP Concepts in JavaScript – An introduction to Functional Programming Concepts in JavaScript. Uses the Ramda library to teach the concepts of composition, pointfree style, and functors through the simplest of examples.",
    "url": "https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-b0650773139c"
  },
  {
    "name": "Functional programming with JavaScript – Another introduction to Functional Programming in JavaScript with a focus on three key themes: computation as the application of functions, statelessness, avoiding side effects.",
    "url": "http://stephen-young.me.uk/2013/01/20/functional-programming-with-javascript.html"
  },
  {
    "name": "A gentle introduction to functional JavaScript – A four-part series introduction functional programming in JavaScript that gets you up to speed what all the hype about functional programming is all about.",
    "url": "http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/"
  },
  {
    "name": "Why Curry Helps – A short overview of how to write reusable and declarative code using currying.",
    "url": "https://hughfdjackson.com/javascript/why-curry-helps/"
  },
  {
    "name": "Favoring Curry",
    "url": "http://fr.umio.us/favoring-curry/",
    "description": "Practical applications of currying using Ramda."
  },
  {
    "name": "JavaScript and Type Thinking – Learn to reason about your JavaScript code with type thinking. Algebraic Data Types are introduced as a conceptual basis to reason about program entities.",
    "url": "https://medium.com/@yelouafi/javascript-and-type-thinking-735edddc388d"
  },
  {
    "name": "Lazy, composable, and modular JavaScript – Use four new featurs of ES6 – iterables, generators, fat arrows, and for-of – in conjunction with higher-order functions, function composition, and lazy evaluation, to write cleaner and more modular JavaScript.",
    "url": "https://codewords.recurse.com/issues/four/lazy-composable-and-modular-javascript"
  },
  {
    "name": "Why Ramda – To those not used to functional programming, Ramda seems to serve no purpose whatsoever. However, it does offer a different style of coding, a style that’s taken for granted in purely functional programming languages: Ramda makes it simple for you to build complex logic through functional composition.",
    "url": "http://fr.umio.us/why-ramda/"
  },
  {
    "name": "A Monad in Practicality: First-Class Failures – A walk through some practical use cases for specific monadic structures in JavaScript: use the Maybe monad to handle simple failure cases and model more complex scenarios with the Either monad or the Validation applicative functor.",
    "url": "http://robotlolita.me/2013/12/08/a-monad-in-practicality-first-class-failures.html"
  },
  {
    "name": "Functional programming – Many articles on various aspects of functional programming in JavaScript by Gleb Bahmutov.",
    "url": "https://glebbahmutov.com/blog/tags/functional/"
  },
  {
    "name": "Functional Programming Jargon – Jargon from the functional programming world explained in JavaScript.",
    "url": "https://github.com/hemanth/functional-programming-jargon"
  },
  {
    "name": "Classroom Coding with Prof. Frisby – A series that builds a “practical” web application with React and functional programming in JavaScript.",
    "url": "https://www.youtube.com/watch?v=h_tkIpwbsxY&list=PLK_hdtAJ4KqX0JOs_KMAmUNTNMRYhWEaC"
  },
  {
    "name": "Hey Underscore, You're Doing It Wrong! – Underscore.js claims to be a functional programming library, but is it really?",
    "url": "https://www.youtube.com/watch?v=m3svKOdZijA"
  },
  {
    "name": "Functional programming patterns for the non-mathematician – Learn about practical use cases for functors, applicatives, and monads.",
    "url": "https://www.youtube.com/watch?v=AvgwKjTPMmM"
  },
  {
    "name": "Pure JavaScript – Christian Johansen will show you how you can significantly up your game by leaving loops behind and embracing functions as the primary unit of abstraction.",
    "url": "https://vimeo.com/49384334"
  },
  {
    "name": "FPJS-Class – Functional Programming learned through JavaScript.",
    "url": "https://github.com/loop-recur/FPJS-Class"
  },
  {
    "name": "functional-javascript-workshop – The goal of this workshop is to create realistic problems that can be solved using terse, vanilla, idiomatic JavaScript to teach fundamental functional programming features of JavaScript.",
    "url": "https://github.com/timoxley/functional-javascript-workshop"
  },
  {
    "name": "functional-frontend-architecture – A functional frontend framework. Based on Ramda + union-type-js + Flyd + Snabbdom",
    "url": "https://github.com/paldepind/functional-frontend-architecture"
  },
  {
    "name": "cube-composer – A puzzle game inspired by functional programming.",
    "url": "https://github.com/sharkdp/cube-composer"
  },
  {
    "name": "FP Youtube Search – YouTube search app with ReactJS, Redux, and FP concepts",
    "url": "https://github.com/jaysoo/example-fp-youtube-search"
  },
  {
    "name": "Hardcore Functional Programming in JavaScript – Learn to apply techniques from the forefront of computer science research to solve practical problems in Javascript. Discover functional programming and see it demonstrated step-by-step with how to build an example web app using abstract interfaces like Monads, Functors, Monoids and Applicatives. (commercial)",
    "url": "https://frontendmasters.com/courses/functional-javascript/"
  },
  {
    "name": "Awesome FRP JS – A curated list of awesome (functional) reactive programming stuff in JavaScript.",
    "url": "https://github.com/stoeffel/awesome-frp-js"
  },
  {
    "name": "lucasviola/Awesome Functional Programming – Awesome resources on functional programming theory and learning materials.",
    "url": "https://github.com/lucasviola/awesome-functional-programming"
  },
  {
    "name": "xgrommx/Awesome Functional Programming – A ton of articles on functional programming, as well as a huge list of functional libraries for many programming languages.",
    "url": "https://github.com/xgrommx/awesome-functional-programming"
  },
  {
    "name": "Functional Programming Resources In JavaScript",
    "url": "https://github.com/busypeoples/functional-programming-javascript"
  },
  {
    "name": "Functional Programming Slack channel – Community with a friendly channel for JavaScript as well as many other channels about functional programming in general.",
    "url": "https://functionalprogramming.slack.com/"
  }
]
